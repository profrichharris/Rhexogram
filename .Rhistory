D <- sqrt(rx^2 + ry^2)
xx <- pts.map[,1] - pts.hex[,1]
yy <- pts.map[,2] - pts.hex[,2]
xsign <- sign(xx)
ysign <- sign(yy)
xx <- abs(xx)
yy <- abs(yy)
dd <- sqrt(xx^2 + yy^2)
saved <- rep(FALSE, nrow(pts.save))
pts.bak <- pts.hex
pts.save <- pts.hex
for(i in seq(1,0.1,by=-0.1)) {
theta <- atan(xx/yy)
xx <- sin(theta) * i *dd
yy <- cos(theta) * i *dd
pts.try <- pts.bak
pts.try[,1] <- pts.try[,1] + xsign * xx
pts.try[,2] <- pts.try[,2] + ysign * yy
subset <- !complete.cases(pts.try)
pts.try[subset,] <- pts.bak[subset,]
pts.hex <- pts.save
for(i in 1:n) {
pts.hex[i,] <- pts.try[i,]
qry <- cbind(pts.hex[i,1], pts.hex[i,2])
if(RANN::nn2(pts.hex, qry, k=2)$nn.dists[,2] > D) {
if(!saved[i]) {
saved[i] == TRUE
pts.save[i,] <- pts.try[i,]
}
}
}
}
X <- pts.save[,1]
Y <- pts.save[,2]
rt = 2 * ry
u = c(rx, 0, -rx, -rx, 0, rx)
v = c(ry, rt, ry, -ry, -rt, -ry)/3
polys <- lapply(1:length(X), function(i) {
coords <- cbind(u + X[i], v + Y[i])
poly <- sp::Polygon(coords)
sp::Polygons(list(poly), ID=i)
})
sppolys <- sp::SpatialPolygons(polys)
plot(map)
plot(sppolys, add=T, col="yellow")
plot(map)
plot(hex[[2]], add=T, col="red")
plot(sppolys, add=T, col="yellow")
pts.hex <- sp::coordinates(hexoutput[[2]])
pts.map <- sp::coordinates(map)
X = pts.hex[,1]
Y = pts.hex[,2]
rx = diff(unique(sort(X)))
rx <- min(rx[rx > 0.001])
ry = diff(unique(sort(Y)))
ry <- min(ry[ry > 0.001])
D <- sqrt(rx^2 + ry^2)
xx <- pts.map[,1] - pts.hex[,1]
yy <- pts.map[,2] - pts.hex[,2]
xsign <- sign(xx)
ysign <- sign(yy)
xx <- abs(xx)
yy <- abs(yy)
dd <- sqrt(xx^2 + yy^2)
saved <- rep(FALSE, nrow(pts.save))
pts.bak <- pts.hex
pts.save <- pts.hex
for(i in seq(1,0.1,by=-0.01)) {
theta <- atan(xx/yy)
xx <- sin(theta) * i *dd
yy <- cos(theta) * i *dd
pts.try <- pts.bak
pts.try[,1] <- pts.try[,1] + xsign * xx
pts.try[,2] <- pts.try[,2] + ysign * yy
subset <- !complete.cases(pts.try)
pts.try[subset,] <- pts.bak[subset,]
pts.hex <- pts.save
for(i in 1:n) {
pts.hex[i,] <- pts.try[i,]
qry <- cbind(pts.hex[i,1], pts.hex[i,2])
if(RANN::nn2(pts.hex, qry, k=2)$nn.dists[,2] > D) {
if(!saved[i]) {
saved[i] == TRUE
pts.save[i,] <- pts.try[i,]
}
}
}
}
X <- pts.save[,1]
Y <- pts.save[,2]
rt = 2 * ry
u = c(rx, 0, -rx, -rx, 0, rx)
v = c(ry, rt, ry, -ry, -rt, -ry)/3
polys <- lapply(1:length(X), function(i) {
coords <- cbind(u + X[i], v + Y[i])
poly <- sp::Polygon(coords)
sp::Polygons(list(poly), ID=i)
})
sppolys <- sp::SpatialPolygons(polys)
plot(map)
plot(sppolys, add=T, col="yellow")
plot(map)
plot(hex[[2]], add=T, col="red")
plot(sppolys, add=T, col="yellow")
D
rx
ry
plot(map)
plot(sppolys, add=T, col="yellow")
pts.hex <- sp::coordinates(hexoutput[[2]])
pts.map <- sp::coordinates(map)
X = pts.hex[,1]
Y = pts.hex[,2]
rx = diff(unique(sort(X)))
rx <- min(rx[rx > 0.001])
ry = diff(unique(sort(Y)))
ry <- min(ry[ry > 0.001])
D <- sqrt(rx^2 + ry^2)
xx <- pts.map[,1] - pts.hex[,1]
yy <- pts.map[,2] - pts.hex[,2]
xsign <- sign(xx)
ysign <- sign(yy)
xx <- abs(xx)
yy <- abs(yy)
dd <- sqrt(xx^2 + yy^2)
saved <- rep(FALSE, nrow(pts.save))
pts.bak <- pts.hex
pts.save <- pts.hex
for(i in seq(1,0.1,by=-0.01)) {
theta <- atan(xx/yy)
xx <- sin(theta) * i *dd
yy <- cos(theta) * i *dd
pts.try <- pts.bak
pts.try[,1] <- pts.try[,1] + xsign * xx
pts.try[,2] <- pts.try[,2] + ysign * yy
subset <- !complete.cases(pts.try)
pts.try[subset,] <- pts.bak[subset,]
pts.hex <- pts.save
pts.hex <- sp::coordinates(hexoutput[[2]])
pts.map <- sp::coordinates(map)
X = pts.hex[,1]
Y = pts.hex[,2]
rx = diff(unique(sort(X)))
rx <- min(rx[rx > 0.001])
ry = diff(unique(sort(Y)))
ry <- min(ry[ry > 0.001])
D <- sqrt(rx^2 + ry^2)
xx <- pts.map[,1] - pts.hex[,1]
yy <- pts.map[,2] - pts.hex[,2]
xsign <- sign(xx)
ysign <- sign(yy)
xx <- abs(xx)
yy <- abs(yy)
dd <- sqrt(xx^2 + yy^2)
saved <- rep(FALSE, nrow(pts.save))
pts.bak <- pts.hex
pts.save <- pts.hex
i <- 1
theta <- atan(xx/yy)
xx <- sin(theta) * i *dd
yy <- cos(theta) * i *dd
pts.try <- pts.bak
pts.try[,1] <- pts.try[,1] + xsign * xx
pts.try[,2] <- pts.try[,2] + ysign * yy
subset <- !complete.cases(pts.try)
pts.try[subset,] <- pts.bak[subset,]
pts.hex <- pts.save
i <- 1
pts.hex[i,] <- pts.try[i,]
qry <- cbind(pts.hex[i,1], pts.hex[i,2])
qry
pts.hex[i,1]
pts.hex[i,2]
RANN::nn2(pts.hex, qry, k=2)
D
saved[i]
pts.hex <- sp::coordinates(hexoutput[[2]])
pts.map <- sp::coordinates(map)
X = pts.hex[,1]
Y = pts.hex[,2]
rx = diff(unique(sort(X)))
rx <- min(rx[rx > 0.001])
ry = diff(unique(sort(Y)))
ry <- min(ry[ry > 0.001])
D <- sqrt(rx^2 + ry^2)
xx <- pts.map[,1] - pts.hex[,1]
yy <- pts.map[,2] - pts.hex[,2]
xsign <- sign(xx)
ysign <- sign(yy)
xx <- abs(xx)
yy <- abs(yy)
dd <- sqrt(xx^2 + yy^2)
saved <- rep(FALSE, nrow(pts.save))
pts.bak <- pts.hex
pts.save <- pts.hex
for(i in seq(1,0.1,by=-0.01)) {
theta <- atan(xx/yy)
xx <- sin(theta) * i *dd
yy <- cos(theta) * i *dd
pts.try <- pts.bak
pts.try[,1] <- pts.try[,1] + xsign * xx
pts.try[,2] <- pts.try[,2] + ysign * yy
subset <- !complete.cases(pts.try)
pts.try[subset,] <- pts.bak[subset,]
for(i in 1:n) {
pts.hex <- pts.save
pts.hex[i,] <- pts.try[i,]
qry <- cbind(pts.hex[i,1], pts.hex[i,2])
if(RANN::nn2(pts.hex, qry, k=2)$nn.dists[,2] > D) {
if(!saved[i]) {
saved[i] == TRUE
pts.save[i,] <- pts.try[i,]
}
}
}
}
X <- pts.save[,1]
Y <- pts.save[,2]
rt = 2 * ry
u = c(rx, 0, -rx, -rx, 0, rx)
v = c(ry, rt, ry, -ry, -rt, -ry)/3
polys <- lapply(1:length(X), function(i) {
coords <- cbind(u + X[i], v + Y[i])
poly <- sp::Polygon(coords)
sp::Polygons(list(poly), ID=i)
})
sppolys <- sp::SpatialPolygons(polys)
plot(map)
plot(sppolys, add=T, col="yellow")
plot(map)
plot(hex[[2]], add=T, col="yellow")
plot(sppolys, add=T, col="red")
points(coordinates(map), add=T)
plot(map)
points(coordinates(map))
plot(sppolys, add=T, col="red")
pts.hex <- sp::coordinates(hexoutput[[2]])
pts.map <- sp::coordinates(map)
X = pts.hex[,1]
Y = pts.hex[,2]
rx = diff(unique(sort(X)))
rx <- min(rx[rx > 0.001])
ry = diff(unique(sort(Y)))
ry <- min(ry[ry > 0.001])
D <- sqrt(rx^2 + ry^2)
D <- max(c(rx, ry))
xx <- pts.map[,1] - pts.hex[,1]
yy <- pts.map[,2] - pts.hex[,2]
xsign <- sign(xx)
ysign <- sign(yy)
xx <- abs(xx)
yy <- abs(yy)
dd <- sqrt(xx^2 + yy^2)
saved <- rep(FALSE, nrow(pts.save))
pts.bak <- pts.hex
pts.save <- pts.hex
for(i in seq(1,0.1,by=-0.01)) {
theta <- atan(xx/yy)
xx <- sin(theta) * i *dd
yy <- cos(theta) * i *dd
pts.try <- pts.bak
pts.try[,1] <- pts.try[,1] + xsign * xx
pts.try[,2] <- pts.try[,2] + ysign * yy
subset <- !complete.cases(pts.try)
pts.try[subset,] <- pts.bak[subset,]
for(i in 1:n) {
pts.hex <- pts.save
pts.hex[i,] <- pts.try[i,]
qry <- cbind(pts.hex[i,1], pts.hex[i,2])
if(RANN::nn2(pts.hex, qry, k=2)$nn.dists[,2] > D) {
if(!saved[i]) {
saved[i] == TRUE
pts.save[i,] <- pts.try[i,]
}
}
}
}
X <- pts.save[,1]
Y <- pts.save[,2]
rt = 2 * ry
u = c(rx, 0, -rx, -rx, 0, rx)
v = c(ry, rt, ry, -ry, -rt, -ry)/3
polys <- lapply(1:length(X), function(i) {
coords <- cbind(u + X[i], v + Y[i])
poly <- sp::Polygon(coords)
sp::Polygons(list(poly), ID=i)
})
sppolys <- sp::SpatialPolygons(polys)
plot(map)
plot(sppolys, add=T, col="red")
points(coordinates(map))
plot(map)
plot(sppolys, add=T, col="yellow")
points(pts.save)
pts.hex <- sp::coordinates(hexoutput[[2]])
pts.map <- sp::coordinates(map)
X = pts.hex[,1]
Y = pts.hex[,2]
rx = diff(unique(sort(X)))
rx <- min(rx[rx > 0.001])
ry = diff(unique(sort(Y)))
ry <- min(ry[ry > 0.001])
D <- sqrt(rx^2 + ry^2)
D <- max(c(rx, ry))
xx <- pts.map[,1] - pts.hex[,1]
yy <- pts.map[,2] - pts.hex[,2]
xsign <- sign(xx)
ysign <- sign(yy)
xx <- abs(xx)
yy <- abs(yy)
dd <- sqrt(xx^2 + yy^2)
saved <- rep(FALSE, nrow(pts.save))
pts.bak <- pts.hex
pts.save <- pts.hex
for(i in seq(1,0.01,by=-0.01)) {
theta <- atan(xx/yy)
xx <- sin(theta) * i *dd
yy <- cos(theta) * i *dd
pts.try <- pts.bak
pts.try[,1] <- pts.try[,1] + xsign * xx
pts.try[,2] <- pts.try[,2] + ysign * yy
subset <- !complete.cases(pts.try)
pts.try[subset,] <- pts.bak[subset,]
for(i in 1:n) {
pts.hex <- pts.save
pts.hex[i,] <- pts.try[i,]
qry <- cbind(pts.hex[i,1], pts.hex[i,2])
if(RANN::nn2(pts.hex, qry, k=2)$nn.dists[,2] > D) {
if(!saved[i]) {
saved[i] == TRUE
pts.save[i,] <- pts.try[i,]
}
}
}
}
X <- pts.save[,1]
Y <- pts.save[,2]
rt = 2 * ry
u = c(rx, 0, -rx, -rx, 0, rx)
v = c(ry, rt, ry, -ry, -rt, -ry)/3
polys <- lapply(1:length(X), function(i) {
coords <- cbind(u + X[i], v + Y[i])
poly <- sp::Polygon(coords)
sp::Polygons(list(poly), ID=i)
})
sppolys <- sp::SpatialPolygons(polys)
plot(map)
plot(sppolys, add=T, col="yellow")
plot(map)
plot(hex[[2]], add=T, col="yellow")
plot(sppolys, add=T, col="red")
pts.hex <- sp::coordinates(hexoutput[[2]])
pts.map <- sp::coordinates(map)
X = pts.hex[,1]
Y = pts.hex[,2]
rx = diff(unique(sort(X)))
rx <- min(rx[rx > 0.001])
ry = diff(unique(sort(Y)))
ry <- min(ry[ry > 0.001])
D <- sqrt(rx^2 + ry^2)
D <- max(c(rx, ry))
xx <- pts.map[,1] - pts.hex[,1]
yy <- pts.map[,2] - pts.hex[,2]
xsign <- sign(xx)
ysign <- sign(yy)
xx <- abs(xx)
yy <- abs(yy)
dd <- sqrt(xx^2 + yy^2)
saved <- rep(FALSE, nrow(pts.save))
pts.bak <- pts.hex
pts.save <- pts.hex
for(i in seq(1,0.5,by=-0.01)) {
theta <- atan(xx/yy)
xx <- sin(theta) * i *dd
yy <- cos(theta) * i *dd
pts.try <- pts.bak
pts.try[,1] <- pts.try[,1] + xsign * xx
pts.try[,2] <- pts.try[,2] + ysign * yy
subset <- !complete.cases(pts.try)
pts.try[subset,] <- pts.bak[subset,]
for(i in 1:n) {
pts.hex <- pts.save
pts.hex[i,] <- pts.try[i,]
qry <- cbind(pts.hex[i,1], pts.hex[i,2])
if(RANN::nn2(pts.hex, qry, k=2)$nn.dists[,2] > D) {
if(!saved[i]) {
saved[i] == TRUE
pts.save[i,] <- pts.try[i,]
}
}
}
}
X <- pts.save[,1]
Y <- pts.save[,2]
rt = 2 * ry
u = c(rx, 0, -rx, -rx, 0, rx)
v = c(ry, rt, ry, -ry, -rt, -ry)/3
polys <- lapply(1:length(X), function(i) {
coords <- cbind(u + X[i], v + Y[i])
poly <- sp::Polygon(coords)
sp::Polygons(list(poly), ID=i)
})
sppolys <- sp::SpatialPolygons(polys)
plot(map)
plot(sppolys, add=T, col="red")
pts.hex <- sp::coordinates(hexoutput[[2]])
pts.map <- sp::coordinates(map)
X = pts.hex[,1]
Y = pts.hex[,2]
rx = diff(unique(sort(X)))
rx <- min(rx[rx > 0.001])
ry = diff(unique(sort(Y)))
ry <- min(ry[ry > 0.001])
D <- sqrt(rx^2 + ry^2)
D <- max(c(rx, ry))
xx <- pts.map[,1] - pts.hex[,1]
yy <- pts.map[,2] - pts.hex[,2]
xsign <- sign(xx)
ysign <- sign(yy)
xx <- abs(xx)
yy <- abs(yy)
dd <- sqrt(xx^2 + yy^2)
saved <- rep(FALSE, nrow(pts.save))
pts.bak <- pts.hex
pts.save <- pts.hex
for(i in seq(1,0.1,by=-0.05)) {
theta <- atan(xx/yy)
xx <- sin(theta) * i *dd
yy <- cos(theta) * i *dd
pts.try <- pts.bak
pts.try[,1] <- pts.try[,1] + xsign * xx
pts.try[,2] <- pts.try[,2] + ysign * yy
subset <- !complete.cases(pts.try)
pts.try[subset,] <- pts.bak[subset,]
for(i in 1:n) {
pts.hex <- pts.save
pts.hex[i,] <- pts.try[i,]
qry <- cbind(pts.hex[i,1], pts.hex[i,2])
if(RANN::nn2(pts.hex, qry, k=2)$nn.dists[,2] > D) {
if(!saved[i]) {
saved[i] <- TRUE
pts.save[i,] <- pts.try[i,]
}
}
}
}
X <- pts.save[,1]
Y <- pts.save[,2]
rt = 2 * ry
u = c(rx, 0, -rx, -rx, 0, rx)
v = c(ry, rt, ry, -ry, -rt, -ry)/3
polys <- lapply(1:length(X), function(i) {
coords <- cbind(u + X[i], v + Y[i])
poly <- sp::Polygon(coords)
sp::Polygons(list(poly), ID=i)
})
sppolys <- sp::SpatialPolygons(polys)
plot(map)
plot(sppolys, add=T, col="red")
pts.hex <- sp::coordinates(hexoutput[[2]])
pts.map <- sp::coordinates(map)
X = pts.hex[,1]
Y = pts.hex[,2]
rx = diff(unique(sort(X)))
rx <- min(rx[rx > 0.001])
ry = diff(unique(sort(Y)))
ry <- min(ry[ry > 0.001])
D <- sqrt(rx^2 + ry^2)
xx <- pts.map[,1] - pts.hex[,1]
yy <- pts.map[,2] - pts.hex[,2]
xsign <- sign(xx)
ysign <- sign(yy)
xx <- abs(xx)
yy <- abs(yy)
dd <- sqrt(xx^2 + yy^2)
saved <- rep(FALSE, nrow(pts.save))
pts.bak <- pts.hex
pts.save <- pts.hex
for(i in seq(1,0.1,by=-0.05)) {
theta <- atan(xx/yy)
xx <- sin(theta) * i *dd
yy <- cos(theta) * i *dd
pts.try <- pts.bak
pts.try[,1] <- pts.try[,1] + xsign * xx
pts.try[,2] <- pts.try[,2] + ysign * yy
subset <- !complete.cases(pts.try)
pts.try[subset,] <- pts.bak[subset,]
for(i in 1:n) {
pts.hex <- pts.save
pts.hex[i,] <- pts.try[i,]
qry <- cbind(pts.hex[i,1], pts.hex[i,2])
if(RANN::nn2(pts.hex, qry, k=2)$nn.dists[,2] > D) {
if(!saved[i]) {
saved[i] <- TRUE
pts.save[i,] <- pts.try[i,]
}
}
}
}
X <- pts.save[,1]
Y <- pts.save[,2]
rt = 2 * ry
u = c(rx, 0, -rx, -rx, 0, rx)
v = c(ry, rt, ry, -ry, -rt, -ry)/3
polys <- lapply(1:length(X), function(i) {
coords <- cbind(u + X[i], v + Y[i])
poly <- sp::Polygon(coords)
sp::Polygons(list(poly), ID=i)
})
sppolys <- sp::SpatialPolygons(polys)
plot(map)
plot(sppolys, add=T, col="red")
